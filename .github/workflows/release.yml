name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Extract version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

  validate-version:
    name: Validate Package Version
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Ensure package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ needs.get-version.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Package.json version $PACKAGE_VERSION does not match tag version $TAG_VERSION"
            exit 1
          fi
          echo "package.json version matches tag version $TAG_VERSION"

  build-linux:
    name: Build Linux
    needs: [get-version, validate-version]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_PUBLISH: 'never'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci || (echo "npm ci failed; updating lockfile" && npm i --package-lock-only && npm ci)
        
      - name: Build Linux
        run: npm run dist:linux
        
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: release/

  build-macos:
    name: Build macOS
    needs: [get-version, validate-version]
    runs-on: macos-latest
    environment: prod
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_PUBLISH: 'never'
      # Code signing and notarization
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci || (echo "npm ci failed; updating lockfile" && npm i --package-lock-only && npm ci)
        
      - name: Build macOS
        run: npm run dist:mac
        
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: release/

  build-windows:
    name: Build Windows
    needs: [get-version, validate-version]
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_PUBLISH: 'never'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci || (echo "npm ci failed; updating lockfile" && npm i --package-lock-only && npm ci)
        
      - name: Build Windows
        run: npm run dist:win
        
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: release/

  publish:
    name: Publish Release
    needs: [get-version, validate-version, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release
          echo "=== Available artifacts ==="
          find all-artifacts -type f -exec ls -l {} \;
          
          echo "=== Copying Windows files ==="
          find all-artifacts/windows-artifacts -type f -name "*.exe" -exec ls -l {} \;
          cp all-artifacts/windows-artifacts/*Setup*.exe release/ || echo "No Windows installer found"
          cp all-artifacts/windows-artifacts/Igloo-*.exe release/ || echo "No Windows portable found"
          
          echo "=== Copying macOS files ==="
          find all-artifacts/macos-artifacts -type f \( -name "*.dmg" -o -name "*.zip" \) -exec ls -l {} \;
          cp all-artifacts/macos-artifacts/*.dmg release/ || echo "No macOS DMG found"
          cp all-artifacts/macos-artifacts/*.zip release/ || echo "No macOS ZIP found"
          
          echo "=== Copying Linux files ==="
          find all-artifacts/linux-artifacts -type f \( -name "*.AppImage" -o -name "*.deb" \) -exec ls -l {} \;
          cp all-artifacts/linux-artifacts/*.AppImage release/ || echo "No Linux AppImage found"
          cp all-artifacts/linux-artifacts/*.deb release/ || echo "No Linux DEB found"
          
          echo "=== Removing unnecessary files ==="
          rm -f release/*.blockmap
          rm -f release/*-mac.zip.blockmap
          rm -f release/*.dmg.blockmap
          
          echo "=== Creating verification files ==="
          # Export public key
          gpg --armor --export austinkelsay@protonmail.com > release/igloo-signing-key.asc
          
          # Create and sign checksums
          cd release
          shasum -a 256 Igloo* igloo* > SHA256SUMS
          gpg --detach-sign --armor SHA256SUMS
          cd ..
          
          echo "=== Final release files ==="
          ls -la release/
      
      - name: Upload assets to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            release/*.exe
            release/*.dmg
            release/*.zip
            release/*.AppImage
            release/*.deb
            release/SHA256SUMS
            release/SHA256SUMS.asc
            release/igloo-signing-key.asc
          tag_name: ${{ github.ref }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          body: |
            # Igloo v${{ needs.get-version.outputs.version }}
            
            ## Downloads
            
            Choose the appropriate file for your platform:
            
            - **Windows**:
              - `Igloo-Setup-${{ needs.get-version.outputs.version }}.exe` - Installer
              - `Igloo-${{ needs.get-version.outputs.version }}-portable.exe` - Portable
            
            - **macOS**:
              - `Igloo-${{ needs.get-version.outputs.version }}-x64.dmg` - Intel Mac Disk Image
              - `Igloo-${{ needs.get-version.outputs.version }}-arm64.dmg` - Apple Silicon Mac Disk Image
              - `Igloo-${{ needs.get-version.outputs.version }}-x64.zip` - Intel Mac ZIP Archive
              - `Igloo-${{ needs.get-version.outputs.version }}-arm64.zip` - Apple Silicon Mac ZIP Archive
            
            - **Linux**:
              - `igloo-${{ needs.get-version.outputs.version }}.AppImage` - AppImage
              - `igloo_${{ needs.get-version.outputs.version }}_amd64.deb` - Debian Package
            
            ## Verification
            
            All releases are signed with GPG. To verify this release:
            
            1. Download the verification files:
               - `igloo-signing-key.asc` - Developer's public key
               - `SHA256SUMS` - File checksums
               - `SHA256SUMS.asc` - Signature for checksums
            
            2. Import the public key:
               ```bash
               curl -sL https://github.com/FROSTR-ORG/igloo/releases/download/v${{ needs.get-version.outputs.version }}/igloo-signing-key.asc | gpg --import
               ```
            
            3. Verify the checksums signature:
               ```bash
               curl -sL https://github.com/FROSTR-ORG/igloo/releases/download/v${{ needs.get-version.outputs.version }}/SHA256SUMS.asc | gpg --verify
               ```
            
            4. Verify file checksums:
               ```bash
               curl -sL https://github.com/FROSTR-ORG/igloo/releases/download/v${{ needs.get-version.outputs.version }}/SHA256SUMS | shasum -a 256 -c
               ```
            
            For detailed verification instructions, see [VERIFICATION.md](https://github.com/${{ github.repository }}/blob/main/VERIFICATION.md) 
